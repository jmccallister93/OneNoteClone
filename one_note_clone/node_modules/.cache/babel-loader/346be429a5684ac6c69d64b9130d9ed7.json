{"ast":null,"code":"var _jsxFileName = \"/home/topshelf/repos/OneNoteClone/OneNoteClone/one_note_clone/src/ListItems.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { TreeTable } from \"primereact/treetable\";\nimport { Column } from \"primereact/column\";\nimport { Button } from \"primereact/button\";\n// import  { NodeService } from './NodeService';\nimport { NodeService } from \"./NodeService\";\nimport useFetch from \"./useFetch\";\nimport axios from \"axios\";\nimport { InputText } from \"primereact\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListItems = (props, _ref) => {\n  _s();\n  let {\n    onSelected\n  } = _ref;\n  const [selectedObj, setSelectedObj] = useState(null);\n  const [nodes, setNodes] = useState([]);\n  const [globalFilter, setGlobalFilter] = useState(null);\n  const [selectedNodeKeys, setSelectedNodeKeys] = useState([]);\n  const treeTableFuncMap = {\n    globalFilter: setGlobalFilter\n  };\n  useEffect(() => {\n    axios.get(\"http://localhost:8000/db\").then(res => setNodes(res.data));\n  }, []);\n  const getHeader = globalFilterKey => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-right\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-input-icon-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"pi pi-search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputText, {\n          type: \"search\",\n          onInput: e => treeTableFuncMap[`${globalFilterKey}`](e.target.value),\n          placeholder: \"Global Search\",\n          size: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  };\n  let header = getHeader(\"globalFilter\");\n  const onEditorValueChange = (options, value) => {\n    let newNodes = JSON.parse(JSON.stringify(nodes));\n    let editedNode = findNodeByKey(newNodes, options.node.key);\n    editedNode.data[options.field] = value;\n    setNodes(newNodes);\n  };\n  const findNodeByKey = (nodes, key) => {\n    let path = key.split(\"-\");\n    let node;\n    while (path.length) {\n      let list = node ? node.children : nodes;\n      node = list[parseInt(path[0], 10)];\n      path.shift();\n    }\n    return node;\n  };\n  const inputTextEditor = options => {\n    return /*#__PURE__*/_jsxDEV(InputText, {\n      type: \"text\",\n      value: options.rowData[options.field],\n      onChange: e => onEditorValueChange(options, e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  };\n  const sizeEditor = options => {\n    return inputTextEditor(options);\n  };\n  const typeEditor = options => {\n    return inputTextEditor(options);\n  };\n  const requiredValidator = e => {\n    let props = e.columnProps;\n    let value = props.node.data[props.field];\n    return value && value.length > 0;\n  };\n  // const passSelected = (value)=> onSelected(value)\n\n  // const selectorHandle = (e) => {\n  //   setSelectedObj(e.value)\n  //   passSelected(e.value)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(TreeTable, {\n    value: nodes.root,\n    resizableColumns: true,\n    columnResizeMode: \"fit\",\n    showGridlines: true,\n    sortMode: \"multiple\",\n    globalFilter: globalFilter,\n    header: header,\n    selectionMode: \"multiple\",\n    selectionKeys: selectedNodeKeys,\n    onSelectionChange: e => setSelectedNodeKeys(e.value),\n    metaKeySelection: true,\n    children: [/*#__PURE__*/_jsxDEV(Column, {\n      field: \"name\",\n      header: \"Name\",\n      expander: true,\n      sortable: true,\n      filter: true,\n      filterPlaceholder: \"Filter by name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      field: \"size\",\n      header: \"Size\",\n      sortable: true,\n      filter: true,\n      filterPlaceholder: \"Filter by size\",\n      editor: sizeEditor,\n      cellEditValidator: requiredValidator,\n      style: {\n        height: '3.5em'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      field: \"type\",\n      header: \"Type\",\n      sortable: true,\n      filter: true,\n      filterPlaceholder: \"Filter by type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(ListItems, \"ET+kDVs7uiqIvGPQgTsiGHYcVZ0=\");\n_c = ListItems;\nexport default ListItems;\nvar _c;\n$RefreshReg$(_c, \"ListItems\");","map":{"version":3,"names":["React","useState","useEffect","TreeTable","Column","Button","NodeService","useFetch","axios","InputText","ListItems","props","onSelected","selectedObj","setSelectedObj","nodes","setNodes","globalFilter","setGlobalFilter","selectedNodeKeys","setSelectedNodeKeys","treeTableFuncMap","get","then","res","data","getHeader","globalFilterKey","e","target","value","header","onEditorValueChange","options","newNodes","JSON","parse","stringify","editedNode","findNodeByKey","node","key","field","path","split","length","list","children","parseInt","shift","inputTextEditor","rowData","sizeEditor","typeEditor","requiredValidator","columnProps","root","height"],"sources":["/home/topshelf/repos/OneNoteClone/OneNoteClone/one_note_clone/src/ListItems.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TreeTable } from \"primereact/treetable\";\nimport { Column } from \"primereact/column\";\nimport { Button } from \"primereact/button\";\n// import  { NodeService } from './NodeService';\nimport { NodeService } from \"./NodeService\";\nimport useFetch from \"./useFetch\";\nimport axios from \"axios\";\nimport { InputText } from \"primereact\";\n\nconst ListItems = (props, { onSelected }) => {\n  const [selectedObj, setSelectedObj] = useState(null);\n  const [nodes, setNodes] = useState([]);\n  const [globalFilter, setGlobalFilter] = useState(null);\n  const [selectedNodeKeys, setSelectedNodeKeys] = useState([]);\n\n  const treeTableFuncMap = {\n    globalFilter: setGlobalFilter,\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:8000/db\").then((res) => setNodes(res.data));\n  }, []);\n\n  const getHeader = (globalFilterKey) => {\n    return (\n      <div className=\"text-right\">\n        <div className=\"p-input-icon-left\">\n          <i className=\"pi pi-search\"></i>\n          <InputText\n            type=\"search\"\n            onInput={(e) =>\n              treeTableFuncMap[`${globalFilterKey}`](e.target.value)\n            }\n            placeholder=\"Global Search\"\n            size=\"50\"\n          />\n        </div>\n      </div>\n    );\n  };\n\n  let header = getHeader(\"globalFilter\");\n\n  const onEditorValueChange = (options, value) => {\n    let newNodes = JSON.parse(JSON.stringify(nodes));\n    let editedNode = findNodeByKey(newNodes, options.node.key);\n    editedNode.data[options.field] = value;\n\n    setNodes(newNodes);\n  };\n  const findNodeByKey = (nodes, key) => {\n    let path = key.split(\"-\");\n    let node;\n\n    while (path.length) {\n      let list = node ? node.children : nodes;\n      node = list[parseInt(path[0], 10)];\n      path.shift();\n    }\n\n    return node;\n  };\n\n  const inputTextEditor = (options) => {\n    return (\n      <InputText\n        type=\"text\"\n        value={options.rowData[options.field]}\n        onChange={(e) => onEditorValueChange(options, e.target.value)}\n      />\n    );\n  };\n\n  const sizeEditor = (options) => {\n    return inputTextEditor(options);\n  };\n\n  const typeEditor = (options) => {\n    return inputTextEditor(options);\n  };\n\n  const requiredValidator = (e) => {\n    let props = e.columnProps;\n    let value = props.node.data[props.field];\n\n    return value && value.length > 0;\n  };\n  // const passSelected = (value)=> onSelected(value)\n\n  // const selectorHandle = (e) => {\n  //   setSelectedObj(e.value)\n  //   passSelected(e.value)\n  // }\n\n  return (\n    <TreeTable\n      value={nodes.root}\n      resizableColumns\n      columnResizeMode=\"fit\"\n      showGridlines\n      sortMode=\"multiple\"\n      globalFilter={globalFilter}\n      header={header}\n      selectionMode=\"multiple\"\n      selectionKeys={selectedNodeKeys}\n      onSelectionChange={(e) => setSelectedNodeKeys(e.value)}\n      metaKeySelection\n    >\n      <Column\n        field=\"name\"\n        header=\"Name\"\n        expander\n        sortable\n        filter\n        filterPlaceholder=\"Filter by name\"\n      ></Column>\n      <Column\n        field=\"size\"\n        header=\"Size\"\n        sortable\n        filter\n        filterPlaceholder=\"Filter by size\"\n        editor={sizeEditor} \n        cellEditValidator={requiredValidator}\n        style={{ height: '3.5em' }}\n      ></Column>\n      <Column\n        field=\"type\"\n        header=\"Type\"\n        sortable\n        filter\n        filterPlaceholder=\"Filter by type\"\n      ></Column>\n    </TreeTable>\n  );\n};\n\nexport default ListItems;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}